#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int n, m;
vector<int> graph[3000];
vector<bool> closed(3000), visited(3000);
int amt = 0;

void dfs(int node) {

	if(closed[node] == true || visited[node] == true) {

		return;

	}
	visited[node] = true;
	amt++;

	for(int i : graph[node]) {

		if(visited[i] == false) {

			dfs(i);

		}

	}

}

int main() {

	freopen("closing.in", "r", stdin);
	freopen("closing.out", "w", stdout);

	cin >> n >> m;
	for(int i = 0; i < m; i++) {

		int a, b;
		cin >> a >> b;

		graph[a].push_back(b);
		graph[b].push_back(a);

	}

	vector<int> closing(n);
	for(int i = 0; i < n; i++) {

		cin >> closing[i];

	}

	dfs(1);
	if(amt == n) {

		cout << "YES" << endl;

	} else {

		cout << "NO" << endl;

	}

	for(int i = 0; i < n - 1; i++) {

		amt = 0;
		fill(visited.begin(), visited.end(), false);
		closed[closing[i]] = true;
		dfs(closing[n - 1]);

		if(amt == n - i - 1) {

			cout << "YES" << endl;

		} else {

			cout << "NO" << endl;

		}

	}

}
