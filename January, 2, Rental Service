#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

bool sortInt(int a, int b) {

	return a > b;

}

bool sortPair(pair<int, int> a, pair<int, int> b) {

	return a.second > b.second;

}

int main() {

	freopen("rental.in", "r", stdin);
	freopen("rental.out", "w", stdout);

	int n, m, r;
	cin >> n >> m >> r;
	vector<int> cowMilk(n);
	for(int i = 0; i < n; i++) {

		cin >> cowMilk[i];

	}

	vector<pair<int, int>> cowSell(m);
	for(int i = 0; i < m; i++) {

		cin >> cowSell[i].first >> cowSell[i].second;

	}

	vector<int> cowRent(r);
	for(int i = 0; i < r; i++) {

		cin >> cowRent[i];

	}

	sort(cowMilk.begin(), cowMilk.end(), sortInt);
	sort(cowSell.begin(), cowSell.end(), sortPair);
	sort(cowRent.begin(), cowRent.end(), sortInt);

	long long answer = 0;
	int curCow = 0;
	int curSeller = 0;
	int curRenter = 0;
	while(curCow < n) {

		int milk = cowMilk[curCow];

		int soldEarned = 0;
		int saveSeller = curSeller;
		int last = 0;

		while(saveSeller < m) {

			int sold = min(milk, cowSell[saveSeller].first);
			milk -= sold;
			soldEarned += sold * cowSell[saveSeller].second;

			if(milk == 0) {

				last = sold;
				break;

			} else {

				saveSeller++;

			}

		}

		if(curRenter >= r || cowRent[curRenter] < soldEarned) {

			answer += soldEarned;
			curSeller = saveSeller;
			if(curSeller < m) {

				cowSell[curSeller].first -= last;

			}
			curCow++;

		} else {

			answer += cowRent[curRenter];
			n--;
			curRenter++;

		}

	}

	cout << answer;

}
